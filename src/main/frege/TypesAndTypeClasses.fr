module TypesAndTypeClasses where

-- FUNCTIONS

removeNonUpperCase :: [Char] -> [Char]
removeNonUpperCase st = [c|c <-st, c `elem` ['A'..'Z']]

addThree :: Int -> Int -> Int -> Int
addThree x y z = x + y + z

factorialSimple :: Integer -> Integer
factorialSimple 0 = 1
factorialSimple x = x * factorial (x - 1)

factorial :: Integer -> Integer
factorial n = product [1..n]

circunference :: Float -> Float
circunference n = 2 * 3.14 * n

-- read "3" it is not implemented ?

-- Pattern not complete
-- Using [1,2] for example it throws:
-- frege.runtime.NoMatch: badAdd at line 25 no match for value frege.prelude.PreludeBase$TList$DCons@7692d9cc
badAdd :: (Num a) => [a] -> a
badAdd (x:y:z:[]) = x + y + z

-- As-patterns
getFirstLetter :: [Char] -> String
getFirstLetter []         = " Empty String sorry"
getFirstLetter (all@x:xs) = "The first letter of " ++ packed all ++ " is " ++ show x

-- Guards Guards!!
bmiTell :: Double -> String
bmiTell bmi
    | bmi <= 18.5 = "You're underweight, you emo, you!"
    | bmi <= 25.0 = "You're supposed normal"
    | bmi <= 30.0 = "You're fat! Lose some weight, fatty!"
    | otherwise = "You're a whale, congratulations!"

bmiTell2 :: Double -> Double -> String
bmiTell2 weight height
    | weight / height ^ 2 <= 18.5 = "You're underweight, you emo, you!"
    | weight / height ^ 2 <= 25.0 = "You're supposed normal"
    | weight / height ^ 2 <= 30.0 = "You're fat! Lose some weight, fatty!"
    | otherwise = "You're a whale, congratulations!"

-- max
max' :: (Ord a) => a -> a -> a
max' a b
    | a <= b    = b
    | otherwise = a

myCompare :: (Ord a) => a -> a -> Ordering
a `myCompare` b
    | a == b    = Eq
    | a <= b    = Lt
    | otherwise = Gt

-- where
bmiTell3 :: Double -> Double -> String
bmiTell3 weight height
    | bmi <= skinny = "You're underweight, you emo, you!"
    | bmi <= normal = "You're supposed normal"
    | bmi <= fat    = "You're fat! Lose some weight, fatty!"
    | otherwise     = "You're a whale, congratulations!"
    where bmi    = weight / height ^ 2
          skinny = 18.5
          normal = 25.0
          fat    = 30.0

-- pattern matching in where
bmiTell4 :: Double -> Double -> String
bmiTell4 weight height
    | bmi <= skinny = "You're underweight, you emo, you!"
    | bmi <= normal = "You're supposed normal"
    | bmi <= fat    = "You're fat! Lose some weight, fatty!"
    | otherwise     = "You're a whale, congratulations!"
    where bmi    = weight / height ^ 2
          (skinny, normal, fat) = (18.5, 25.0, 30.0)

-- String is not Haskell String :P
initials :: String -> String -> String
initials firstname lastname   = f ++ ". " ++ l ++ "."
    where f = take 1 firstname
          l = take 1 lastname

-- functions in where blocks
calcBmis :: [(Double, Double)] -> [Double]
calcBmis xs = [bmi w h | (w,h) <- xs]
    where bmi weight height = weight / height ^ 2

-- let basic example
cylinder :: Double -> Double -> Double
cylinder r h =
    let pi       = 3.14
        sideArea = 2 * pi * r * h
        topArea  = pi * r ^ 2
     in sideArea + 2 * topArea

-- let in local scope
-- [let square x = x * x in (square 2, square 3, square 4)]
-- (let (a,b,c) = (1,2,3) in a + b + c)

-- let in list comprehensions
-- no need to use 'let' keyword in list comprehensions in Frege
-- although there are several solutions I like this one for this
-- particular function
calcBmis2 :: [(Double, Double)] -> [Double]
calcBmis2 xs = [bmi | (w,h) <- xs, bmi = w / h ^ 2]

-- case expression in function
head' :: [a] -> a
head' xs = case xs of []     -> error "error"
                      (x:_)  -> x

describeList :: [a] -> String
describeList xs = "This list is " ++ case xs of []    -> "Empty list"
                                                [x]   -> "List of one single element"
                                                xs    -> "Longer list"

describeList' :: [a] -> String
describeList' ls = "The list is " ++ what ls
    where what []  = "empty"
          what [x] = "list of one element"
          what ls  = "longer list"
